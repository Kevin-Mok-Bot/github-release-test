@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (env.BRANCH_NAME != "") {
                        // Switch to branch if not on a multibranch pipeline
                        env.BRANCH_NAME = params.BUILD_BRANCH_NAME
                    }
                }
            }
        }
        stage('Clone repositories') { 
            steps {
                dir("kogito-runtimes") {
                    checkout(githubscm.resolveRepository("kogito-runtimes", "kiegroup", env.BRANCH_NAME, false))
                }
                dir("kogito-apps") {
                    checkout(githubscm.resolveRepository("kogito-apps", "kiegroup", env.BRANCH_NAME, false))
                }
                dir("kogito-examples") {
                    checkout(githubscm.resolveRepository("kogito-examples", "kiegroup", env.BRANCH_NAME, false))
                }
                // Use a separate dir for persistence to not overwrite the test results
                sh "cp -r kogito-examples{,-persistence}"
            }
        }
        stage('Prepare Maven settings'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s $MAVEN_SETTINGS_FILE' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config"
                }
            }
        }
        stage('Build kogito-runtimes') {
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                dir("kogito-apps") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Build kogito-examples with persistence') {
            steps {
                dir("kogito-examples-persistence") {
                    script {
                        // Don't run with tests so far, see: https://github.com/quarkusio/quarkus/issues/6885
                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', true)
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
                dir("kogito-apps") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
        stage('Archive staging repository URL') {
            input {
                message "Enter staging repository URL:"
                parameters {
                    string(name: 'STAGING_REPO_URL')
                }
            }
            steps {
                sh "mkdir -p archive"
                writeFile(file: "archive/staging-url.txt", text: "${STAGING_REPO_URL}")
                archiveArtifacts(artifacts: "archive/staging-url.txt")
            }
        }
    }
    post {
        always {
            junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
            cleanWs()
        }
    }
}
